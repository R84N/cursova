import { v } from "convex/values";
import { mutation, query } from "./_generated/server";

// –ú–∞—Å–∏–≤ —ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏ –¥–ª—è –¥–æ—à–∫–∏ (–Ω–∞—Ä–∞–∑—ñ –æ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
const images = ["/board.webp"];

// üü¢ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –¥–æ—à–∫–∏
export const create = mutation({
  args: {
    orgId: v.string(),  // ID –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó
    title: v.string(),  // –ù–∞–∑–≤–∞ –¥–æ—à–∫–∏
  },
  handler: async (ctx, args) => {
    const identity = await ctx.auth.getUserIdentity(); // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    if (!identity) {
      throw new Error("Unauthorized"); // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π ‚Äî –ø–æ–º–∏–ª–∫–∞
    }

    // –í–∏–ø–∞–¥–∫–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–∞—Å–∏–≤—É
    const randomImage = images[Math.floor(Math.random() * images.length)];

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –¥–æ—à–∫–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    const board = await ctx.db.insert("boards", {
      title: args.title,
      orgId: args.orgId,
      authorId: identity.subject,    // ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      authorName: identity.name!,    // –Ü–º‚Äô—è –∞–≤—Ç–æ—Ä–∞ (–Ω–µ null)
      imageUrl: randomImage,         // URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    });

    return board;
  },
});

// üî¥ –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–æ—à–∫–∏ (—ñ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ —É–ª—é–±–ª–µ–Ω–æ–≥–æ, —è–∫—â–æ —Ç—Ä–µ–±–∞)
export const remove = mutation({
  args: { id: v.id("boards") }, // ID –¥–æ—à–∫–∏
  handler: async (ctx, args) => {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      throw new Error("Unauthorized");
    }

    const userId = identity.subject;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ —Ü—è –¥–æ—à–∫–∞ –≤ —É–ª—é–±–ª–µ–Ω–∏—Ö —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const existingFavorite = await ctx.db
      .query("userFavorites")
      .withIndex("by_user_board", (q) =>
        q.eq("userId", userId).eq("boardId", args.id)
      )
      .unique();

    // –Ø–∫—â–æ —Ç–∞–∫ ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ –∑ —É–ª—é–±–ª–µ–Ω–æ–≥–æ
    if (existingFavorite) {
      await ctx.db.delete(existingFavorite._id);
    }

    // –í–∏–¥–∞–ª—è—î–º–æ —Å–∞–º—É –¥–æ—à–∫—É
    await ctx.db.delete(args.id);
  },
});

// üü° –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –¥–æ—à–∫–∏
export const update = mutation({
  args: { id: v.id("boards"), title: v.string() },
  handler: async (ctx, args) => {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      throw new Error("Unauthorized");
    }

    const title = args.title.trim();

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞–∑–≤–∏
    if (!title) {
      throw new Error("Title is required");
    }

    if (title.length > 60) {
      throw new Error("Title cannot be longer than 60 characters");
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –¥–æ—à–∫–∏
    const board = await ctx.db.patch(args.id, {
      title: args.title,
    });

    return board;
  },
});

// ‚≠ê –î–æ–¥–∞—Ç–∏ –¥–æ—à–∫—É –¥–æ —É–ª—é–±–ª–µ–Ω–æ–≥–æ
export const favorite = mutation({
  args: { id: v.id("boards"), orgId: v.string() },
  handler: async (ctx, args) => {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      throw new Error("Unauthorized");
    }

    const board = await ctx.db.get(args.id);
    if (!board) {
      throw new Error("Board not found");
    }

    const userId = identity.subject;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ –≤–∂–µ —î –¥–æ—à–∫–∞ –≤ —É–ª—é–±–ª–µ–Ω–æ–º—É
    const existingFavorite = await ctx.db
      .query("userFavorites")
      .withIndex("by_user_board_org", (q) =>
        q.eq("userId", userId).eq("boardId", board._id).eq("orgId", args.orgId)
      )
      .unique();

    if (existingFavorite) {
      throw new Error("Board already favorited");
    }

    // –î–æ–¥–∞—î–º–æ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ —É–ª—é–±–ª–µ–Ω–∏—Ö
    await ctx.db.insert("userFavorites", {
      userId,
      boardId: board._id,
      orgId: args.orgId,
    });

    return board;
  },
});

// üö´ –í–∏–¥–∞–ª–∏—Ç–∏ –¥–æ—à–∫—É –∑ —É–ª—é–±–ª–µ–Ω–æ–≥–æ
export const unfavorite = mutation({
  args: { id: v.id("boards") },
  handler: async (ctx, args) => {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      throw new Error("Unauthorized");
    }

    const board = await ctx.db.get(args.id);
    if (!board) {
      throw new Error("Board not found");
    }

    const userId = identity.subject;

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —É–ª—é–±–ª–µ–Ω–∏–π –∑–∞–ø–∏—Å
    const existingFavorite = await ctx.db
      .query("userFavorites")
      .withIndex("by_user_board", (q) =>
        q.eq("userId", userId).eq("boardId", board._id)
      )
      .unique();

    if (!existingFavorite) {
      throw new Error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö");
    }

    // –í–∏–¥–∞–ª—è—î–º–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö
    await ctx.db.delete(existingFavorite._id);

    return board;
  },
});

// üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–¥–Ω—ñ—î—ó –¥–æ—à–∫–∏ –∑–∞ ID
export const get = query({
  args: { id: v.id("boards") },
  handler: async (ctx, args) => {
    const board = ctx.db.get(args.id); // –ü—Ä–æ—Å—Ç–∞ –≤–∏–±—ñ—Ä–∫–∞ –∑ –±–∞–∑–∏
    return board;
  },
});
